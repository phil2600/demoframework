 * Faire un diagramme UML
 * Il y a un probleme de modelisation au niveau des updates des shapes.
   _ Il faut 2 updates : 1)Pour les mouvements
                         2)Pour OpenGL
     Il serait donc bon de revoir la methode 'update_special'...

 * Wrapper malloc

 * Faire fonctionner BOLD avec le programme (nécessite de compiler avec -m64)

 * Trier les fichiers mathematiques

 * Gestion des evenements dans le temps
   _Selon un Script
   _Selon la Musique
 * Scripter les actions :
   _Langage compilé ou interprété (python, xml...)
   _S'en servir pour la conf du programme (conf OpenGL)
   _Générer le script avec une interface (web ?)
   _Mettre le source compressé du script en dur dans le code
     _L'extraire au chargement
     _Générer du code C/Cpp à l'exécution, le compiler, le charger (weird !)
   _Gerer une timeline grace au script

 * Do factory patterns for :
   _Shapes => DONE
   _Events => DONE
   _GraphicalTransformations

 * RM map & list (ParticleList) => take lot of memory

 * Citer les sources quelque part...
 * Installer doxygen

 * Faire de la ParticleList une classe bcp plus générique
 * Faire des cubes de points une shape à part (dépendant ou pas des ParticleList)
   _Faire de la récursion pour subdiviser le travail -> Cf.ShapeBall

 * Récup tutos (addison.pdf, "OpenGL Programming Guide").
